//------------------------------------------------------------------------------
// <auto-generated>
//     此代码是根据模板生成的。
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，则所做更改将丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Weixin.Models
{
    [DataContract(IsReference = true)]
    public partial class We_User: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region 基元属性
    
        [DataMember]
        public string openid
        {
            get { return _openid; }
            set
            {
                if (_openid != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("属性“openid”是对象键的一部分，不可更改。仅当未跟踪对象或对象处于“已添加”状态时，才能对键属性进行更改。");
                    }
                    _openid = value;
                    OnPropertyChanged("openid");
                }
            }
        }
        private string _openid;
    
        [DataMember]
        public string nickname
        {
            get { return _nickname; }
            set
            {
                if (_nickname != value)
                {
                    _nickname = value;
                    OnPropertyChanged("nickname");
                }
            }
        }
        private string _nickname;
    
        [DataMember]
        public string sex
        {
            get { return _sex; }
            set
            {
                if (_sex != value)
                {
                    _sex = value;
                    OnPropertyChanged("sex");
                }
            }
        }
        private string _sex;
    
        [DataMember]
        public string city
        {
            get { return _city; }
            set
            {
                if (_city != value)
                {
                    _city = value;
                    OnPropertyChanged("city");
                }
            }
        }
        private string _city;
    
        [DataMember]
        public string country
        {
            get { return _country; }
            set
            {
                if (_country != value)
                {
                    _country = value;
                    OnPropertyChanged("country");
                }
            }
        }
        private string _country;
    
        [DataMember]
        public string province
        {
            get { return _province; }
            set
            {
                if (_province != value)
                {
                    _province = value;
                    OnPropertyChanged("province");
                }
            }
        }
        private string _province;
    
        [DataMember]
        public string language
        {
            get { return _language; }
            set
            {
                if (_language != value)
                {
                    _language = value;
                    OnPropertyChanged("language");
                }
            }
        }
        private string _language;
    
        [DataMember]
        public string headimgurl
        {
            get { return _headimgurl; }
            set
            {
                if (_headimgurl != value)
                {
                    _headimgurl = value;
                    OnPropertyChanged("headimgurl");
                }
            }
        }
        private string _headimgurl;
    
        [DataMember]
        public Nullable<System.DateTime> subscribe_time
        {
            get { return _subscribe_time; }
            set
            {
                if (_subscribe_time != value)
                {
                    _subscribe_time = value;
                    OnPropertyChanged("subscribe_time");
                }
            }
        }
        private Nullable<System.DateTime> _subscribe_time;
    
        [DataMember]
        public string unionid
        {
            get { return _unionid; }
            set
            {
                if (_unionid != value)
                {
                    _unionid = value;
                    OnPropertyChanged("unionid");
                }
            }
        }
        private string _unionid;
    
        [DataMember]
        public string kind
        {
            get { return _kind; }
            set
            {
                if (_kind != value)
                {
                    _kind = value;
                    OnPropertyChanged("kind");
                }
            }
        }
        private string _kind;
    
        [DataMember]
        public string status
        {
            get { return _status; }
            set
            {
                if (_status != value)
                {
                    _status = value;
                    OnPropertyChanged("status");
                }
            }
        }
        private string _status;
    
        [DataMember]
        public string serv_auth
        {
            get { return _serv_auth; }
            set
            {
                if (_serv_auth != value)
                {
                    _serv_auth = value;
                    OnPropertyChanged("serv_auth");
                }
            }
        }
        private string _serv_auth;
    
        [DataMember]
        public Nullable<decimal> serv_price
        {
            get { return _serv_price; }
            set
            {
                if (_serv_price != value)
                {
                    _serv_price = value;
                    OnPropertyChanged("serv_price");
                }
            }
        }
        private Nullable<decimal> _serv_price;
    
        [DataMember]
        public Nullable<decimal> pay_total
        {
            get { return _pay_total; }
            set
            {
                if (_pay_total != value)
                {
                    _pay_total = value;
                    OnPropertyChanged("pay_total");
                }
            }
        }
        private Nullable<decimal> _pay_total;
    
        [DataMember]
        public Nullable<decimal> cost_total
        {
            get { return _cost_total; }
            set
            {
                if (_cost_total != value)
                {
                    _cost_total = value;
                    OnPropertyChanged("cost_total");
                }
            }
        }
        private Nullable<decimal> _cost_total;
    
        [DataMember]
        public Nullable<decimal> remn_amount
        {
            get { return _remn_amount; }
            set
            {
                if (_remn_amount != value)
                {
                    _remn_amount = value;
                    OnPropertyChanged("remn_amount");
                }
            }
        }
        private Nullable<decimal> _remn_amount;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion
    }
}
