//------------------------------------------------------------------------------
// <auto-generated>
//     此代码是根据模板生成的。
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，则所做更改将丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Weixin.Models
{
    [DataContract(IsReference = true)]
    public partial class We_Order: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region 基元属性
    
        [DataMember]
        public int order_id
        {
            get { return _order_id; }
            set
            {
                if (_order_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("属性“order_id”是对象键的一部分，不可更改。仅当未跟踪对象或对象处于“已添加”状态时，才能对键属性进行更改。");
                    }
                    _order_id = value;
                    OnPropertyChanged("order_id");
                }
            }
        }
        private int _order_id;
    
        [DataMember]
        public string customer
        {
            get { return _customer; }
            set
            {
                if (_customer != value)
                {
                    _customer = value;
                    OnPropertyChanged("customer");
                }
            }
        }
        private string _customer;
    
        [DataMember]
        public string vendor
        {
            get { return _vendor; }
            set
            {
                if (_vendor != value)
                {
                    _vendor = value;
                    OnPropertyChanged("vendor");
                }
            }
        }
        private string _vendor;
    
        [DataMember]
        public string pay_status
        {
            get { return _pay_status; }
            set
            {
                if (_pay_status != value)
                {
                    _pay_status = value;
                    OnPropertyChanged("pay_status");
                }
            }
        }
        private string _pay_status;
    
        [DataMember]
        public Nullable<decimal> ord_amount
        {
            get { return _ord_amount; }
            set
            {
                if (_ord_amount != value)
                {
                    _ord_amount = value;
                    OnPropertyChanged("ord_amount");
                }
            }
        }
        private Nullable<decimal> _ord_amount;
    
        [DataMember]
        public Nullable<decimal> pay_amount
        {
            get { return _pay_amount; }
            set
            {
                if (_pay_amount != value)
                {
                    _pay_amount = value;
                    OnPropertyChanged("pay_amount");
                }
            }
        }
        private Nullable<decimal> _pay_amount;
    
        [DataMember]
        public string status
        {
            get { return _status; }
            set
            {
                if (_status != value)
                {
                    _status = value;
                    OnPropertyChanged("status");
                }
            }
        }
        private string _status;
    
        [DataMember]
        public Nullable<System.DateTime> order_time
        {
            get { return _order_time; }
            set
            {
                if (_order_time != value)
                {
                    _order_time = value;
                    OnPropertyChanged("order_time");
                }
            }
        }
        private Nullable<System.DateTime> _order_time;
    
        [DataMember]
        public Nullable<System.DateTime> start_time
        {
            get { return _start_time; }
            set
            {
                if (_start_time != value)
                {
                    _start_time = value;
                    OnPropertyChanged("start_time");
                }
            }
        }
        private Nullable<System.DateTime> _start_time;
    
        [DataMember]
        public Nullable<System.DateTime> end_time
        {
            get { return _end_time; }
            set
            {
                if (_end_time != value)
                {
                    _end_time = value;
                    OnPropertyChanged("end_time");
                }
            }
        }
        private Nullable<System.DateTime> _end_time;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion
    }
}
