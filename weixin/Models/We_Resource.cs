//------------------------------------------------------------------------------
// <auto-generated>
//     此代码是根据模板生成的。
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，则所做更改将丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Weixin.Models
{
    [DataContract(IsReference = true)]
    public partial class We_Resource: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region 基元属性
    
        [DataMember]
        public int resource_id
        {
            get { return _resource_id; }
            set
            {
                if (_resource_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("属性“resource_id”是对象键的一部分，不可更改。仅当未跟踪对象或对象处于“已添加”状态时，才能对键属性进行更改。");
                    }
                    _resource_id = value;
                    OnPropertyChanged("resource_id");
                }
            }
        }
        private int _resource_id;
    
        [DataMember]
        public string creator
        {
            get { return _creator; }
            set
            {
                if (_creator != value)
                {
                    _creator = value;
                    OnPropertyChanged("creator");
                }
            }
        }
        private string _creator;
    
        [DataMember]
        public Nullable<System.DateTime> create_time
        {
            get { return _create_time; }
            set
            {
                if (_create_time != value)
                {
                    _create_time = value;
                    OnPropertyChanged("create_time");
                }
            }
        }
        private Nullable<System.DateTime> _create_time;
    
        [DataMember]
        public string cata
        {
            get { return _cata; }
            set
            {
                if (_cata != value)
                {
                    _cata = value;
                    OnPropertyChanged("cata");
                }
            }
        }
        private string _cata;
    
        [DataMember]
        public string kind
        {
            get { return _kind; }
            set
            {
                if (_kind != value)
                {
                    _kind = value;
                    OnPropertyChanged("kind");
                }
            }
        }
        private string _kind;
    
        [DataMember]
        public string name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    OnPropertyChanged("name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public string media_path
        {
            get { return _media_path; }
            set
            {
                if (_media_path != value)
                {
                    _media_path = value;
                    OnPropertyChanged("media_path");
                }
            }
        }
        private string _media_path;
    
        [DataMember]
        public string thb_media_path
        {
            get { return _thb_media_path; }
            set
            {
                if (_thb_media_path != value)
                {
                    _thb_media_path = value;
                    OnPropertyChanged("thb_media_path");
                }
            }
        }
        private string _thb_media_path;
    
        [DataMember]
        public string status
        {
            get { return _status; }
            set
            {
                if (_status != value)
                {
                    _status = value;
                    OnPropertyChanged("status");
                }
            }
        }
        private string _status;
    
        [DataMember]
        public Nullable<System.DateTime> update_time
        {
            get { return _update_time; }
            set
            {
                if (_update_time != value)
                {
                    _update_time = value;
                    OnPropertyChanged("update_time");
                }
            }
        }
        private Nullable<System.DateTime> _update_time;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion
    }
}
