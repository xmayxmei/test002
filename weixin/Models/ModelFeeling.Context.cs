//------------------------------------------------------------------------------
// <auto-generated>
//     此代码是根据模板生成的。
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，则所做更改将丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data.Common;
using System.Data.EntityClient;
using System.Data.Metadata.Edm;
using System.Data.Objects.DataClasses;
using System.Data.Objects;
using System.Data;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace Weixin.Models
{
    public partial class FeelingEntities : ObjectContext
    {
        public const string ConnectionString = "name=feelingEntities";
        public const string ContainerName = "feelingEntities";
    
        #region Constructors
    
        public FeelingEntities()
            : base(ConnectionString, ContainerName)
        {
            Initialize();
        }
    
        public FeelingEntities(string connectionString)
            : base(connectionString, ContainerName)
        {
            Initialize();
        }

        public FeelingEntities(EntityConnection connection)
            : base(connection, ContainerName)
        {
            Initialize();
        }
    
        private void Initialize()
        {
            // 创建代理需要使用 ProxyDataContractResolver 和
            // 可允许延迟加载，这可以在序列化期间展开加载图。
            ContextOptions.ProxyCreationEnabled = false;
            ObjectMaterialized += new ObjectMaterializedEventHandler(HandleObjectMaterialized);
        }
    
        private void HandleObjectMaterialized(object sender, ObjectMaterializedEventArgs e)
        {
            var entity = e.Entity as IObjectWithChangeTracker;
            if (entity != null)
            {
                bool changeTrackingEnabled = entity.ChangeTracker.ChangeTrackingEnabled;
                try
                {
                    entity.MarkAsUnchanged();
                }
                finally
                {
                    entity.ChangeTracker.ChangeTrackingEnabled = changeTrackingEnabled;
                }
                this.StoreReferenceKeyValues(entity);
            }
        }
    
        #endregion
    
        #region ObjectSet 属性
    
        public ObjectSet<We_Cost> We_Cost
        {
            get { return _we_Cost  ?? (_we_Cost = CreateObjectSet<We_Cost>("We_Cost")); }
        }
        private ObjectSet<We_Cost> _we_Cost;
    
        public ObjectSet<We_Dict> We_Dict
        {
            get { return _we_Dict  ?? (_we_Dict = CreateObjectSet<We_Dict>("We_Dict")); }
        }
        private ObjectSet<We_Dict> _we_Dict;
    
        public ObjectSet<We_Message> We_Message
        {
            get { return _we_Message  ?? (_we_Message = CreateObjectSet<We_Message>("We_Message")); }
        }
        private ObjectSet<We_Message> _we_Message;
    
        public ObjectSet<We_Order> We_Order
        {
            get { return _we_Order  ?? (_we_Order = CreateObjectSet<We_Order>("We_Order")); }
        }
        private ObjectSet<We_Order> _we_Order;
    
        public ObjectSet<We_Resource> We_Resource
        {
            get { return _we_Resource  ?? (_we_Resource = CreateObjectSet<We_Resource>("We_Resource")); }
        }
        private ObjectSet<We_Resource> _we_Resource;
    
        public ObjectSet<We_User> We_User
        {
            get { return _we_User  ?? (_we_User = CreateObjectSet<We_User>("We_User")); }
        }
        private ObjectSet<We_User> _we_User;

        #endregion
    }
}
